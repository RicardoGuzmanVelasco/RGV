@startuml
'''''''''''''
skin rose
allowmixing
skinparam componentstyle uml1
'''''''''''''
title Preconditions
header DesignByContract
footer v1.0

component Client #white

package RGV.DesignByContract{
+class "Contract" as ContractFaçade <<static, non-generic façade>>{
    +{static}Require<T>(T): Contract<T>
    +{static}Ensure<T>(T): Contract<T>
    +{static}Invariant<T>(T): Contract<T>
    
    +GreaterThan<T>(:Contract<T>, other:T)
    +{method}...
    +Contains<T>(:Contract<T>, other:T)
    +{method}...
    +Null<T>(:Contract<T>)
    +{method}...
    +False<T>(:Contract<<Func<bool>>)
    +True<T>(:Contract<bool>)
    +{method}...
}

+class Precondition<T>{
}
+class Postcondition<T>{
}
+class Invariant<T>{
}


+class Contract<T>{
    -target: T {readonly}
    -negated: bool
    +Not: Contract<T> {get;}
    --
    +Evaluate(:Func<T, bool>): bool
    ==
    {'Not' returns other instance}
    {Evaluate cannot receive null}
}
}
'''''''''''''

ContractFaçade --> Contract
ContractFaçade ..> Contract::Evaluate
Client .r.> ContractFaçade
Client ..> Contract::Not

Precondition -u-|> Contract
Postcondition -u-|> Contract
Invariant -u-|> Contract

package System{
 class ArgumentException <<(E, lightblue)>>
 class InvalidOperationException <<(E, lightblue)>>
 class ApplicationException <<(E, lightblue)>>
}

Precondition ..> ArgumentException
Postcondition ..> ApplicationException
Invariant ..> InvalidOperationException

'''''''''''''

@enduml
